{"version":3,"file":"static/js/200.faff8230.chunk.js","mappings":"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","sources":["components/auth/UpdatePassword/helpers.js","components/auth/UpdatePassword/updatePasswordForm.js","components/auth/UpdatePassword/constants.js","components/auth/UpdatePassword/index.js","components/auth/Confirmation/index.js","pages/auth/Confirmation/index.js"],"sourcesContent":["import * as Yup from 'yup';\nexport const updatePasswordInitialValues = {\n  password: '',\n  confirmPassword: ''\n};\nexport const updatePasswordSchema = Yup.object().shape({\n  password: Yup.string()\n    .required('Please Enter your password')\n    .test(\n      'regex',\n      'Password must be min 8 characters, and have 1 Special Character, 1 Uppercase, 1 Number and 1 Lowercase',\n      (val) => {\n        let regExp = new RegExp(\n          '^(?=.*\\\\d)(?=.*[!@#$%^&*])(?=.*[a-z])(?=.*[A-Z]).{8,}$'\n        );\n        return regExp.test(val);\n      }\n    ),\n  confirmPassword: Yup.string()\n    .required('Please Enter confirm password')\n    .oneOf([Yup.ref('password'), null], 'Passwords must match')\n});\n","import React from 'react';\nimport { Button, TextField, CircularProgress } from '@mui/material';\nimport {\n  _OUTLINE,\n  _SMALL,\n  _PASSWORD,\n  _SUBMIT\n} from '../../../utils/Constants';\nimport {\n  LOGIN,\n  _NEW_PASSWORD,\n  NEW_PASSWORD,\n  ENTER_NEW_PASSWORD,\n  _CONFIRM_PASSWORD,\n  CONFIRM_PASSWORD,\n  RE_ENTER_PASSWORD\n} from './constants';\n\nconst ResetPasswordForm = (props) => {\n  const {\n    touched,\n    errors,\n    loading,\n    values,\n    handleSubmit,\n    handleChange,\n    title\n  } = props;\n  return (\n    <form onSubmit={handleSubmit} autoComplete=\"off\">\n      <div className=\"mb-4 w-100\">\n        <div className=\"mb-4 mt-2 w-100\">\n          <TextField\n            fullWidth\n            variant={_OUTLINE}\n            className=\"custom-text-field dark:custom-text-field-dark\"\n            size={_SMALL}\n            type={_PASSWORD}\n            autoComplete={_NEW_PASSWORD}\n            name={_PASSWORD}\n            id=\"textfield-password\"\n            onChange={handleChange}\n            label={NEW_PASSWORD}\n            placeholder={ENTER_NEW_PASSWORD}\n            error={touched.password && Boolean(errors.password)}\n            helperText={touched.password && errors.password}\n\n          />\n        </div>\n        <div className=\"mb-4 mt-2 w-100\">\n          <TextField\n            fullWidth\n            variant={_OUTLINE}\n            className=\"custom-text-field dark:custom-text-field-dark\"\n            size={_SMALL}\n            type={_PASSWORD}\n            autoComplete=\"confirm-password\"\n            name={_CONFIRM_PASSWORD}\n            id=\"textfield-confrim-password\"\n            onChange={handleChange}\n            label={CONFIRM_PASSWORD}\n            placeholder={RE_ENTER_PASSWORD}\n            value={values.email}\n            error={touched.confirmPassword && Boolean(errors.confirmPassword)}\n            helperText={touched.confirmPassword && errors.confirmPassword}\n          />\n        </div>\n        <Button\n          type={_SUBMIT}\n          className=\"primary-btn\"\n          variant=\"contained\">\n          {!loading ? (\n            title\n          ) : (\n            <CircularProgress className=\"text-primary\" size={24} />\n          )}\n        </Button>\n      </div>\n\n      <hr className=\"my-8\" />\n      <div id=\"signup-div\" className=\"text-center text-sm mt-4 cursor-pointer\">\n        Don't want to Update?{' '}\n        <a\n          href={'/login'}\n          className=\"text-sm font-medium text-primary\">\n          {LOGIN}\n        </a>\n      </div>\n    </form>\n  );\n};\nexport default ResetPasswordForm;\n","export const _NEW_PASSWORD = 'new-password';\nexport const NEW_PASSWORD = 'New Password';\nexport const ENTER_NEW_PASSWORD = 'Enter New Password';\n\nexport const _CONFIRM_PASSWORD = 'confirmPassword';\nexport const CONFIRM_PASSWORD = 'Confirm Password';\nexport const RE_ENTER_PASSWORD = 'Re Enter your password';\n\nexport const UPDATE_PASSWORD = 'Update Password';\n\nexport const UPDATE = 'Update';\nexport const LOGIN = 'Login';\n","import React, { useState } from 'react';\nimport ImageLight from '../../../assets/img/login-office.jpeg';\nimport ImageDark from '../../../assets/img/login-office-dark.jpeg';\nimport { Formik } from 'formik';\nimport { useLocation } from 'react-router-dom';\nimport { updatePasswordInitialValues, updatePasswordSchema } from './helpers';\nimport UpdatePasswordForm from './updatePasswordForm';\nimport { _CONFIRM_TOKEN } from '../../../utils/Constants';\nimport { success, error } from '../../shared/Helpers';\n\nconst useQuery = () => {\n  return new URLSearchParams(useLocation().search);\n};\n\nconst UpdatePassword = ({ title, UpdatePasswordRequest }) => {\n  let query = useQuery();\n  const [loading, setLoading] = useState(false);\n\n  const SubmitForm = data => {\n    const token = query.get(_CONFIRM_TOKEN);\n    setLoading(true);\n    UpdatePasswordRequest(token, data).then(res => {\n      setLoading(false);\n      if (res.status === 200) {\n        success(res.message);\n        window.location = '/login';\n      } else error(res.message);\n    });\n  };\n  return (\n    <>\n      <div className=\"flex items-center min-h-screen p-6 bg-gray-50 dark:bg-gray-900\">\n        <div className=\"flex-1 max-w-4xl mx-auto overflow-hidden bg-white rounded-lg shadow-xl dark:bg-gray-800\">\n          <div className=\"flex flex-col overflow-y-auto md:flex-row\">\n            <div className=\"h-32 md:h-auto md:w-1/2\">\n              <img\n                aria-hidden=\"true\"\n                className=\"object-cover w-full h-full dark:hidden\"\n                src={ImageLight}\n                alt=\"Office\"\n              />\n              <img\n                aria-hidden=\"true\"\n                className=\"hidden object-cover w-full h-full dark:block\"\n                src={ImageDark}\n                alt=\"Office\"\n              />\n            </div>\n            <main className=\"flex items-center justify-center p-6 sm:p-12 md:w-1/2\">\n              <div className=\"w-full\">\n                <h1 className=\"mb-4 text-xl font-semibold text-gray-700 dark:text-gray-200\">\n                  {title}\n                </h1>\n                <div>\n                  <Formik\n                    initialValues={updatePasswordInitialValues}\n                    onSubmit={SubmitForm}\n                    validationSchema={updatePasswordSchema}>\n                    {props => {\n                      return (\n                        <>\n                          <UpdatePasswordForm\n                            loading={loading}\n                            {...props}\n                            title={title}\n                          />\n                        </>\n                      );\n                    }}\n                  </Formik>\n                </div>\n              </div>\n            </main>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\nexport default UpdatePassword;\n","import React, { useEffect } from 'react';\nimport { confirmEmail } from '../../../services/auth';\nimport UpdatePassword from '../UpdatePassword'\nimport {SET_PASSWORD} from '../../../utils/Constants';\n\nconst Confirmation = () => {\n  useEffect(() => {\n    localStorage.clear();\n  }, []);\n\n  return (\n    <>\n      <UpdatePassword title={SET_PASSWORD} UpdatePasswordRequest = {confirmEmail} />\n    </>\n  );\n};\n\nexport default Confirmation;\n","import React from 'react';\nimport Confirmation from '../../../components/auth/Confirmation';\n\nconst ConfirmationPage = () => {\n  return (\n    <>\n      <Confirmation />\n    </>\n  );\n};\n\nexport default ConfirmationPage;\n"],"names":["updatePasswordInitialValues","password","confirmPassword","updatePasswordSchema","Yup","shape","required","test","val","RegExp","oneOf","props","touched","errors","loading","values","handleSubmit","handleChange","title","onSubmit","autoComplete","className","TextField","fullWidth","variant","_OUTLINE","size","_SMALL","type","_PASSWORD","name","id","onChange","label","placeholder","error","Boolean","helperText","value","email","Button","_SUBMIT","CircularProgress","href","UpdatePasswordRequest","query","URLSearchParams","useLocation","search","useState","setLoading","src","ImageLight","alt","ImageDark","initialValues","data","token","get","_CONFIRM_TOKEN","then","res","status","success","message","window","location","validationSchema","useEffect","localStorage","clear","UpdatePassword","SET_PASSWORD","confirmEmail"],"sourceRoot":""}